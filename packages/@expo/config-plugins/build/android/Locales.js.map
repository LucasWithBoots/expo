{"version":3,"file":"Locales.js","names":["_path","data","require","_","_XML","_locales","withLocales","config","withDangerousMod","modResults","setLocalesAsync","projectRoot","modRequest","exports","getLocales","locales","localesMap","getResolvedLocalesAsync","lang","localizationObj","Object","entries","path","join","AndroidConfig","Paths","getResourceFolderAsync","writeXMLAsync","xml","resources","map","k","v","string","$","name"],"sources":["../../src/android/Locales.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { join } from 'path';\n\nimport { AndroidConfig, withDangerousMod } from '..';\nimport { ConfigPlugin } from '../Plugin.types';\nimport { writeXMLAsync } from '../utils/XML';\nimport { getResolvedLocalesAsync, LocaleJson } from '../utils/locales';\n\nexport const withLocales: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      config.modResults = await setLocalesAsync(config, {\n        projectRoot: config.modRequest.projectRoot,\n      });\n      return config;\n    },\n  ]);\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot }: { projectRoot: string }\n): Promise<unknown> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return config;\n  }\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales, 'android');\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const path = join(\n      await AndroidConfig.Paths.getResourceFolderAsync(projectRoot),\n      `values-b+${lang}`,\n      'strings.xml'\n    );\n    writeXMLAsync({\n      path,\n      xml: {\n        resources: Object.entries(localizationObj).map(([k, v]) => ({\n          string: {\n            $: {\n              name: k,\n            },\n            _: v,\n          },\n        })),\n      },\n    });\n  }\n\n  return config;\n}\n"],"mappings":";;;;;;;;AACA,SAAAA,MAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,KAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAE,EAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,CAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAG,KAAA;EAAA,MAAAH,IAAA,GAAAC,OAAA;EAAAE,IAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAI,SAAA;EAAA,MAAAJ,IAAA,GAAAC,OAAA;EAAAG,QAAA,YAAAA,CAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEO,MAAMK,WAAyB,GAAIC,MAAM,IAAK;EACnD,OAAO,IAAAC,oBAAgB,EAACD,MAAM,EAAE,CAC9B,SAAS,EACT,MAAOA,MAAM,IAAK;IAChBA,MAAM,CAACE,UAAU,GAAG,MAAMC,eAAe,CAACH,MAAM,EAAE;MAChDI,WAAW,EAAEJ,MAAM,CAACK,UAAU,CAACD;IACjC,CAAC,CAAC;IACF,OAAOJ,MAAM;EACf,CAAC,CACF,CAAC;AACJ,CAAC;AAACM,OAAA,CAAAP,WAAA,GAAAA,WAAA;AAEK,SAASQ,UAAUA,CACxBP,MAAmC,EACS;EAC5C,OAAOA,MAAM,CAACQ,OAAO,IAAI,IAAI;AAC/B;AAEO,eAAeL,eAAeA,CACnCH,MAAmC,EACnC;EAAEI;AAAqC,CAAC,EACtB;EAClB,MAAMI,OAAO,GAAGD,UAAU,CAACP,MAAM,CAAC;EAClC,IAAI,CAACQ,OAAO,EAAE;IACZ,OAAOR,MAAM;EACf;EACA,MAAMS,UAAU,GAAG,MAAM,IAAAC,kCAAuB,EAACN,WAAW,EAAEI,OAAO,EAAE,SAAS,CAAC;EAEjF,KAAK,MAAM,CAACG,IAAI,EAAEC,eAAe,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,UAAU,CAAC,EAAE;IAChE,MAAMM,IAAI,GAAG,IAAAC,YAAI,EACf,MAAMC,iBAAa,CAACC,KAAK,CAACC,sBAAsB,CAACf,WAAW,CAAC,EAC7D,YAAYO,IAAI,EAAE,EAClB,aACF,CAAC;IACD,IAAAS,oBAAa,EAAC;MACZL,IAAI;MACJM,GAAG,EAAE;QACHC,SAAS,EAAET,MAAM,CAACC,OAAO,CAACF,eAAe,CAAC,CAACW,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,MAAM;UAC1DC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,IAAI,EAAEJ;YACR,CAAC;YACD5B,CAAC,EAAE6B;UACL;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EAEA,OAAOzB,MAAM;AACf","ignoreList":[]}